/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot 
{

	List lista_procs = new ArrayList();
	HashMap< String , Integer > mapVar = new HashMap< String, Integer >();
	private RobotWorldDec world;

	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;
		
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

< ASSIGNTO : "assignTo" >
| < GOTO : "goto" >
| < MOVE : "move" >
| < TURN : "turn" >
| < FACE : "face" >
| < PUT : "put" >
| < PICK : "pick" >
| < MOVETOTHE : "moveToThe" >
| < MOVEINDIR : "moveInDir" >
| < JUMPTOTHE : "jumpToThe" >
| < JUMPINDIR : "jumpInDir" >
| < NOP : "nop" >

}

TOKEN: /* Palabras reservadas */
{
  < ROBOTR : "ROBOT_R" >
| < VARS  : "VARS" >
| < PROCS  : "PROCS" > 
| <BALLOONS:"BALLOONS">
| <CHIPS:"CHIPS">	

}

TOKEN:/* Partes de las Estructuras de control */
{
 < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < WHILE : "while" >
| < DO : "do" >
| < REPEAT : "repeat" > 

}

TOKEN:/* Condiciones */
{
 < FACING  : "facing" >
| < CANPUT : "canPut" >
| < CANPICK : "canPick" >
| < CANMOVEINDIR : "canMoveInDir" >
| < CANJUMPINDIR : "canJumpInDir" >
| < CANMOVETOTHE : "canMoveToThe" >
| < CANJUMPTOTHE : "canJumpToThe" >
| < NOT : "not" >
 
}

TOKEN: /*Elementos de las condiciones*/
{
< POSITION : ("FRONT"|"RIGHT"|"LEFT"|"BACK"|"ARROUND") >
| < DIRECTION : ("NORTH"|"SOUTH"|"EAST"|"WEST") > 
}

TOKEN : /* Otros */
{
 < #DIGIT: ["0"-"9"] >
| < #MAY: ["A"-"Z"] >
| < #MIN: ["a"-"z"] >
| < NOMB: ( (<MIN>|<MAY>)(<MAY>|<MIN>|<DIGIT>)* )>
| < NUM: (<DIGIT>)+ >
| < DPUNTOS : ":">
| < PCOMA : ";" >
| < COMA : "," >

        
}


void oneline():
{}
{
  < ROBOTR > (variables())? (procedures())? (instructions())?
}


void variables():
{}
{
  < VARS > (variable())?
}

void variable():
{Token nombre;}
{
  nombre = < NOMB >
  < NOMB >(anotherVariable())?< PCOMA > { mapVar.put(nombre.image, null);}
}

void anotherVariable ():
{Token nombre;}
{
  nombre = < NOMB >
  < COMA >< NOMB >(anotherVariable())? { mapVar.put(nombre.image, null);}
}

void procedures():
{}
{
  < PROCS > (procedure())*
}

void procedure():
{Token procedimiento;}
{
	procedimiento = < NOMB >"["parameters()instructions()"]" {lista_procs.add(procedimiento.image);}
  }

void parameters():
{}
{
  "|"(< NOMB > (< COMA ><NOMB >)*)?"|"
  
}

void instructions():
{}
{
  "["instruction()(< PCOMA >instruction())*"]"
}
void instruction():
{}
{
	(command()|cstructure()|proccall())
}
void command():
{}
{
	(	  assignto()
	| Goto()
	| move()
	| turn()
	| face()
	| put()
	| pick()
	| movetothe()
	| moveindir()
	| jumptothe()
	| jumpindir()
	| nop()
)
	
}

void assignto() throws Error:
{Token nombre;
Token numero;}
{
  < ASSIGNTO > < DPUNTOS > numero = < NUM > <COMA > nombre = < NOMB > { if (mapVar.containsKey(nombre.image))
  													{ mapVar.put(nombre.image, Integer.parseInt(numero.image));}
  													else throw new Error("Variable no ha sido definida :"+nombre.image); }
}

void Goto():
{Token tx;
Token ty;
int x;
int y;}
{
 < GOTO > <DPUNTOS > ( tx = < NUM > {x = Integer.parseInt(tx.image); } | x = nomb())< COMA >(ty = < NUM > {y = Integer.parseInt(ty.image); } | y = nomb())
 {
   world.setPostion(x,y);
 }
}

void move():
{Token tnum;
int num;}
{
  < MOVE ><DPUNTOS >(tnum = < NUM > { num = Integer.parseInt(tnum.image); } | num = nomb())
  {
	world.moveForward(num, false);
  }
}

void turn():
{Token posicion;}
{
  < TURN >< DPUNTOS > posicion = < POSITION >
  {
	if (posicion.image == "right") {
	world.turnRight();}
	else if (posicion.image == "left") {
	world.turnRight();
	world.turnRight();
	world.turnRight(); }
	/// No encontramos un turnLeft por ello usamos 3 turnRight
	else if (posicion.image == "arround") {
	  world.turnRight();
	  world.turnRight();}
  }
}

void face():
{Token Tdireccion;}
{
  < FACE ><DPUNTOS > Tdireccion = < DIRECTION >
  {
    if(Tdireccion.image == "north") {
    	while(!world.facingNorth()) {
    		world.turnRight();}}
    else if (Tdireccion.image == "south") {
    	while(!world.facingNorth()) {
    		world.turnRight();}}
    else if (Tdireccion.image == "east") {
    	while(!world.facingNorth()) {
    		world.turnRight();}}
    else if (Tdireccion.image == "west") {
    	while(!world.facingNorth()) {
    		world.turnRight();}}
  }
}
void put():
{Token item;
int cant;
Token tCant;
}
{
  < PUT ><DPUNTOS >( tCant = < NUM > { cant = Integer.parseInt(tCant.image); } | cant = nomb())< COMA >(item = < BALLOONS > | item = < CHIPS >)
	{
		if( item.image == "balloons" ) {
			for (int i=1; i <= cant; i++) {
				world.putBalloon();} }
		else if ( item.image == "chips" ) {
			for (int i=1; i <=  cant; i++) {
				world.putChip();} }
				
	}
}
void pick():
{Token tCant;
int cant;
Token item;}
{
  < PICK ><DPUNTOS >(tCant = < NUM > { cant = Integer.parseInt(tCant.image); }| cant = nomb())< COMA >(item = < BALLOONS >|item = < CHIPS >)

	{
  		if( item.image == "balloons" ) {
			for (int i=1; i <= cant; i++) {
				world.pickupBalloon();} }
		else if ( item.image == "chips" ) {
			for (int i=1; i <=  cant; i++) {
				world.pickupChip();} }
				
	}
}

void movetothe() :
{Token tCant;
int cant;
Token posicion;}
{
	< MOVETOTHE >< DPUNTOS >(tCant = < NUM > { cant = Integer.parseInt(tCant.image); }|cant = nomb())< COMA > posicion = < POSITION >
	{
	  if( posicion.image == "front") {
	  	for (int i=1; i <= cant; i++) {
			world.up();}}
	  else if( posicion.image == "back") {
	  	for (int i=1; i <= cant; i++) {
			world.down();}}
	  else if( posicion.image == "right") {
	  	for (int i=1; i <= cant; i++) {
			world.right();}}
	  else if( posicion.image == "left") {
	  	for (int i=1; i <= cant; i++) {
			world.left();}}
	}
}

void moveindir() : 
{Token tCant;
int cant;
Token direccion;}
{
	< MOVEINDIR >< DPUNTOS >( tCant = <	NUM > { cant = Integer.parseInt(tCant.image); }| cant = nomb())< COMA > direccion =< DIRECTION >
	{
		if(direccion.image == "north") {
    		while(!world.facingNorth()) {
    			world.turnRight();}}
    	else if (direccion.image == "south") {
    		while(!world.facingNorth()) {
    			world.turnRight();}}
    	else if (direccion.image == "east") {
    		while(!world.facingNorth()) {
    			world.turnRight();}}
    	else if (direccion.image == "west") {
    		while(!world.facingNorth()) {
    			world.turnRight();}}
    	world.moveForward(cant, false);
	}
}

void jumptothe() :
{Token tCant;
int cant;
Token posicion;}
{
	< JUMPTOTHE >< DPUNTOS >(tCant = < NUM > { cant = Integer.parseInt(tCant.image);}| cant = nomb())< COMA > posicion = < POSITION >
	{
	  	if (posicion.image == "right") {
			world.turnRight();
			world.moveForward(cant, true);
			world.turnRight();
			world.turnRight();
			world.turnRight(); }
		else if (posicion.image == "left") {
			world.turnRight();
			world.turnRight();
			world.turnRight();
			world.moveForward(cant, true);
			world.turnRight(); }
	/// No encontramos un turnLeft por ello usamos 3 turnRight
		else if (posicion.image == "back") {
	  		world.turnRight();
	  		world.turnRight();
	  		world.moveForward(cant, true);
	  		world.turnRight();
	  		world.turnRight();}
	  	else if (posicion.image == "front") {
	  		world.moveForward(cant, true);}
	  	
	}
}

void jumpindir() : 
{Token tCant;
int cant;
Token direccion;}
{
	< JUMPINDIR >< DPUNTOS >(tCant =< NUM > { cant = Integer.parseInt(tCant.image);}| cant = nomb())< COMA > direccion = < DIRECTION >
	{
		if(direccion.image == "north") {
    		while(!world.facingNorth()) {
    			world.turnRight();}}
    	else if (direccion.image == "south") {
    		while(!world.facingNorth()) {
    			world.turnRight();}}
    	else if (direccion.image == "east") {
    		while(!world.facingNorth()) {
    			world.turnRight();}}
    	else if (direccion.image == "west") {
    		while(!world.facingNorth()) {
    			world.turnRight();}}
    	world.moveForward(cant, false);
	}
}

void nop():
{}
{
	< NOP >< DPUNTOS >
}

void cstructure():
{}
{
	(
	  theif()
	  |thewhile()
	  |repeat()
	)
}

void theif():
{}
{
	< IF >
	< DPUNTOS >
	condicional()
	< DPUNTOS >
	< THEN >
	< DPUNTOS >
	(instructions()|cstructure())
	< ELSE >
	< DPUNTOS >
	(instructions()|cstructure())
}

void thewhile():
{}
{
  < WHILE >< DPUNTOS > condicional()< COMA >< DO >< DPUNTOS > instructions()
}

void repeat():
{}
{
	< REPEAT >< DPUNTOS >(< NOMB >|< NUM >) instructions()
}

boolean condicional():
{boolean rta;}
{
	(
	  rta = facing()
	| rta = canput()
	| rta = canpick()
	| rta = canmoveindir()
	| rta = canjumpindir()
	| rta = canmovetothe()
	| rta = canjumptothe()
	| rta = not()
	)
	{return rta;}
}

boolean condicionalSeguro():
{boolean rta;}
{
	(
	  rta = facing()
	| rta = canput()
	| rta = canpick()
	| rta = canmoveindir()
	| rta = canjumpindir()
	| rta = canmovetothe()
	| rta = canjumptothe()
	)
	{return rta; }
}

boolean facing():
{Token  direccion;
boolean rta = false;}
{
  < FACING ><DPUNTOS > direccion = < DIRECTION >
  {
    if(direccion.image == "north") {
    	rta = world.facingNorth(); }
    else if(direccion.image == "south") {
      	rta = world.facingSouth(); }
    else if(direccion.image == "west") {
      	rta = world.facingWest(); }
    else if(direccion.image == "east") {
      	rta = world.facingEast(); }
    return rta;
  }
}
  
boolean canput():
{boolean respuesta = true;
Token numchips;
int chips = 1;}
{


  < CANPUT ><DPUNTOS >
  (numchips = < NUM > {chips = Integer.parseInt(numchips.image);}
  | chips = nomb() )< COMA > 
  (
    < BALLOONS > {respuesta = true;}
  | < CHIPS > {if (world.freeSpacesForChips() > chips) {respuesta = true;} else {respuesta = false;} }
	)
  {return respuesta;}
}
   
boolean canpick():

{boolean respuesta = true;
Token numchip;
int chip = 1;}

{
  
  < CANPICK >< DPUNTOS >
  (numchip= < NUM > {chip = Integer.parseInt(numchip.image);}|
  chip = nomb())< COMA > 
  (
   < BALLOONS > {respuesta = true;}
  |< CHIPS >{if (world.chipsToPick() >= chip) {respuesta = true;} else {respuesta = false;} }
  )
  {return respuesta;}
}
     
boolean canmoveindir():
{Point p =world.getPosition();
int tam = world.getN();
int newY = p.x;
int newX = p.y;
boolean respuesta = true;
Token num;
Token dir;
int pasos = 0;
}
{
	< CANMOVEINDIR >< DPUNTOS >
	(
	  num = < NUM > {pasos = Integer.parseInt(num.image);}
	| pasos = nomb()
	)< COMA >
	dir = < DIRECTION > { String direccion = dir.image; }

	{  if (newY > tam || newX > tam)
		{respuesta = false; }

	else { 
		if (direccion == "north")
			{newY = p.y+pasos;
			if (world.blockedInRange(p.x, p.y, newY, 0))
	  			{respuesta = false; }
	  		else
	  			{respuesta = true; }
			}
		else if (direccion == "south")
			{newY = p.y-pasos;
			if (world.blockedInRange(p.x, p.y, newY, 1))
	  			{respuesta = false; }
	  		else
	  			{respuesta = true; }}
		else if (direccion == "west" )
			{newX = p.x-pasos;
			if (world.blockedInRange(p.x, p.y, newX, 4))
	  			{respuesta = false; }
	  		else
	  			{respuesta = true; }}
		else if (direccion == "east")
			{newX = p.x+pasos;
			if (world.blockedInRange(p.x, p.y, newX, 2))
	  			{respuesta = false; }
	  		else
	  			{respuesta = true; }} }


	 
	}  

	{return respuesta;}
}

boolean canjumpindir():
{Point p =world.getPosition();
int tam = world.getN();
int newY = p.x;
int newX = p.y;
boolean respuesta = true;
Token num;
Token dir;
int pasos = 0;
}
{
  	< CANJUMPINDIR >< DPUNTOS >
  	(num = < NUM > {pasos = Integer.parseInt(num.image);}
  	|pasos = nomb())< COMA >
  	dir =< DIRECTION > { String direccion = dir.image; }

	{ if (direccion == "north")
		{newY = p.y+pasos;}
	else if (direccion == "south")
		{newY = p.y-pasos;}
	else if (direccion == "west" )
		{newX = p.x-pasos;}
	else if (direccion == "east")
		{newX = p.x+pasos;}

	  if (newY > tam || newX > tam)
		{respuesta = false; }
	  else if (world.isBlocked(new Point(newX, newY)))
	  	{respuesta = false; }
	  else
	  	{respuesta = true; }
	}  

	{return respuesta;}
}

boolean canmovetothe():
{Point p =world.getPosition();
int tam = world.getN();
int newY = p.x;
int newX = p.y;
boolean respuesta = true;
Token num;
Token pos;
int pasos = 0;
}
{
	< CANMOVETOTHE >< DPUNTOS >
	(
	  num =< NUM>{pasos = Integer.parseInt(num.image);}
	| pasos = nomb()
	)
	< COMA >
	pos =< POSITION >{ String posicion = pos.image; }
	{  if (newY > tam || newX > tam)
		{respuesta = false; }

	else { 
		if (posicion == "front")
			{newY = p.y+pasos;
			if (world.blockedInRange(p.x, p.y, newY, 0))
	  			{respuesta = false; }
	  		else
	  			{respuesta = true; }
			}
		else if (posicion == "back")
			{newY = p.y-pasos;
			if (world.blockedInRange(p.x, p.y, newY, 1))
	  			{respuesta = false; }
	  		else
	  			{respuesta = true; }}
		else if (posicion == "left" )
			{newX = p.x-pasos;
			if (world.blockedInRange(p.x, p.y, newX, 3))
	  			{respuesta = false; }
	  		else
	  			{respuesta = true; }}
		else if (posicion == "right")
			{newX = p.x+pasos;
			if (world.blockedInRange(p.x, p.y, newX, 4))
	  			{respuesta = false; }
	  		else
	  			{respuesta = true; }} }


	 
	}  

	{return respuesta;}
}

boolean canjumptothe():
{Point p =world.getPosition();
int tam = world.getN();
int newY = p.x;
int newX = p.y;
boolean respuesta = true;
Token num;
Token pos;
int pasos = 0;
}
{
  	< CANJUMPTOTHE >< DPUNTOS >
  	(
  	  num = < NUM >{pasos = Integer.parseInt(num.image);}
  	| pasos = nomb()
  	)< COMA >
  	pos = < POSITION >{ String posicion = pos.image; }

  	{ if (posicion == "front")
		{newY = p.y+pasos;}
	else if (posicion == "back")
		{newY = p.y-pasos;}
	else if (posicion == "right" )
		{newX = p.x+pasos;}
	else if (posicion == "left")
		{newX = p.x-pasos;}

	  if (newY > tam || newX > tam)
		{respuesta = false; }
	  else if (world.isBlocked(new Point(newX, newY)))
	  	{respuesta = false; }
	  else
	  	{respuesta = true; }
	}  

	{return respuesta;}
}
	 
  
boolean not():
{boolean rta;}
{
	< NOT >< DPUNTOS > rta = condicionalSeguro()
	{
	  return !rta;
	}
}

void proccall() throws Error:
{Token proc;}
{
	proc=< NOMB ><DPUNTOS >arguments()
{
			if (!lista_procs.contains(proc.image))
				{ throw new Error("Función no definida: "+proc.image+" !!"); }
			}
	
}

void arguments():
{}
{
	argument()(LOOKAHEAD(2)< COMA > argument())*
}

void argument():
{}
{
	(	  < NOMB >
	| < NUM >
	| < DIRECTION >
	| < POSITION >
)  
}

int nomb() throws Error:
{Token nombre;}
{
  nombre = < NOMB > { if (mapVar.containsKey(nombre.image))
  				{if(mapVar.get(nombre.image) == null)
  				 { throw new Error("Variable no tiene valor asignado" + nombre.image);} 
  				 else {return mapVar.get(nombre.image); } } 
  			else { throw new Error("Variable no definida"); } } 

}










//NO ELIMINAR POR AHORA, PODRÍA SER UTIL MÁS TARDE.

	//boolean command(uniandes.lym.robot.view.Console sistema) :
	/*boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

/*

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
*/
	